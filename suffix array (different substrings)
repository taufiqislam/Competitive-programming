#pragma GCC Optimize ("Ofast")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ll long long
#define N '\n'
#define pb push_back
#define pob pop_back
#define ff first
#define ss second
#define bb begin()
#define ee end()
#define fastIO() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
using namespace __gnu_pbds;

vector<ll> suffixArray(string s)
{
    ll n = s.size();
    const ll alphabet = 256;
    vector<ll> p(n), c(n), cnt(max(alphabet, n), 0);
    for (ll i = 0; i < n; i++)
    {
        cnt[s[i]]++;
    }
    for (ll i = 1; i < alphabet; i++)
    {
        cnt[i] += cnt[i-1];
    }
    for (ll i = 0; i < n; i++)
    {
        p[--cnt[s[i]]] = i;
    }
    c[p[0]] = 0;
    ll classes = 1;
    for (ll i = 1; i < n; i++)
    {
        if (s[p[i]] != s[p[i-1]])
        {
            classes++;
        }
        c[p[i]] = classes - 1;
    }
    vector<ll> pn(n), cn(n);
    for (ll h = 0; (1 << h) < n; ++h)
    {
        for (ll i = 0; i < n; i++)
        {
            pn[i] = p[i] - (1 << h);
            if (pn[i] < 0)
            {
                pn[i] += n;
            }
        }
        fill(cnt.begin(), cnt.begin() + classes, 0);
        for (ll i = 0; i < n; i++)
        {
            cnt[c[pn[i]]]++;
        }
        for (ll i = 1; i < classes; i++)
        {
            cnt[i] += cnt[i-1];
        }
        for (ll i = n-1; i >= 0; i--)
        {
            p[--cnt[c[pn[i]]]] = pn[i];
        }
        cn[p[0]] = 0;
        classes = 1;
        for (ll i = 1; i < n; i++)
        {
            pair<ll, ll> cur = {c[p[i]], c[(p[i] + (1 << h)) % n]};
            pair<ll, ll> prev = {c[p[i-1]], c[(p[i-1] + (1 << h)) % n]};
            if (cur != prev)
            {
                ++classes;
            }
            cn[p[i]] = classes - 1;
        }
        c.swap(cn);
    }
    return p;
}

vector<ll> prefix(string s,vector<ll> p)
{
    ll n = s.size();
    vector<ll> ran(n+100, 0);
    for (ll i = 0; i < n; i++)
    {
        ran[p[i]] = i;
    }

    ll k = 0;
    vector<ll> lcp(n+100, 0);
    for (ll i = 0; i < n; i++)
    {
        if (ran[i] == n - 1)
        {
            k = 0;
            continue;
        }
        ll j = p[ran[i] + 1];
        while (i + k < n && j + k < n && s[i+k] == s[j+k])
        {
            k++;
        }

        lcp[ran[i]] = k;
        if (k)
        {
            k--;
        }
    }
    return lcp;
}

int main()
{
    ll t,it;
    t = 1;
    for(it = 1; it <= t; it++)
    {
        ll i,n,j,k,s = 0,c,d,x,y,e,f;
        string str;
        cin >> str;
        str += '$';
        ll alp[30] = {};
        vector<ll> suf = suffixArray(str);
        str.pop_back();
        suf.erase(suf.begin());
        vector<ll> lcp = prefix(str,suf);
        n = str.size();
        for(i = 0;i < n;i++)
        {
            c = n - suf[i] - lcp[i];
            alp[str[suf[i]] - 'a'] += c;
        }
        for(i = 0;i < 26;i++)
        {
            cout << alp[i] << " ";
        }
        cout << N;
    }

}



