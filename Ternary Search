#pragma GCC Optimize ("Ofast")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ll long long
#define N '\n'
#define pb push_back
#define pob pop_back
#define ff first
#define ss second
#define bb begin()
#define ee end()
#define fastIO() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
using namespace __gnu_pbds;
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero).

double dist(double x1, double y1, double x2, double y2)
{
    return sqrt(((x1-x2)*(x1-x2)) + ((y1-y2)*(y1-y2)));
}



int main()
{
    fastIO();
    ll t = 1,it;
    cin >> t;
    for(it = 1;it <= t;it++)
    {
        ll n,m,q,i,j,k,s = 0,x,y,c = 0,d = 0,f = 0;
        double ax,ay,bx,by,cx,cy,dx,dy,f1,f2;
        cin >> ax >> ay >> bx >> by >> cx >> cy >> dx >> dy;
        pair<double,double> m1,m2,m3,m4;
        while(dist(ax,ay,bx,by) > 0.00000001)
        {
            m1 = make_pair(((bx+2*ax)/3),((by+2*ay)/3));
            m2 = make_pair(((2*bx+ax)/3),((2*by+ay)/3));
            m3 = make_pair(((dx+2*cx)/3),((dy+2*cy)/3));
            m4 = make_pair(((2*dx+cx)/3),((2*dy+cy)/3));
            f1 = dist(m1.ff,m1.ss,m3.ff,m3.ss);
            f2 = dist(m2.ff,m2.ss,m4.ff,m4.ss);
            if(f1 > f2)
            {
                ax = m1.ff;
                ay = m1.ss;
                cx = m3.ff;
                cy = m3.ss;
            }
            else if(f1 < f2)
            {
                bx = m2.ff;
                by = m2.ss;
                dx = m4.ff;
                dy = m4.ss;
            }
            else
            {
                ax = m1.ff;
                ay = m1.ss;
                cx = m3.ff;
                cy = m3.ss;
                bx = m2.ff;
                by = m2.ss;
                dx = m4.ff;
                dy = m4.ss;
            }
        }
        cout << "Case " << it << ": ";
        cout << fixed << setprecision(8) << dist(m1.ff,m1.ss,m3.ff,m3.ss) << N;
    }
    return 0;
}

