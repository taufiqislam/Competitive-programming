#pragma GCC Optimize ("Ofast")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ll long long
#define N '\n'
#define pb push_back
#define pob pop_back
#define ff first
#define ss second
#define bb begin()
#define ee end()
#define fastIO() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
using namespace __gnu_pbds;
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero).

vector<ll> v[20005];
ll vis[20005];
ll mt[20005];
ll mc[20005];

ll kuhn(ll n)
{
    if(vis[n] == 0)
    {
        vis[n] = 1;
        for(ll i = 0;i < v[n].size();i++)
        {
            if(mt[v[n][i]] == -1 || kuhn(mt[v[n][i]]))
            {
                mt[v[n][i]] = n;
                return 1;
            }
        }
        return 0;
    }
    else
    {
        return 0;
    }
}



int main()
{
    fastIO();
    ll t = 1,it;
    for(it = 1;it <= t;it++)
    {
        ll n,m,q,i,j,k,s = 0,x,y,c = 0,d = 0,f = 0;
        cin >> m >> n >> k;
        for(i = 0;i < k;i++)
        {
            cin >> c >> d;
            v[c].pb(d+m);
            v[d+m].pb(c);
        }
        ll ans = 0;
        memset(mt,-1,sizeof(mt));
        for(i = 1;i <= m;i++)
        {
            memset(vis,0,sizeof(vis));
            if(kuhn(i))
            {
                ans++;
            }
        }
        ll maxi = 0;
        memcpy(mc,mt,sizeof(mc));
        for(i = 1;i <= m;i++)
        {
            memcpy(mt,mc,sizeof(mt));
            v[m+n+1] = v[i];
            v[m+n+2] = v[i];
            d = 0;
            memset(vis,0,sizeof(vis));
            if(kuhn(n+m+1))
            {
                d++;
            }
            memset(vis,0,sizeof(vis));
            if(kuhn(n+m+2))
            {
                d++;
            }
            maxi = max(maxi,d);
        }
        cout << ans+maxi << N;
    }
    return 0;
}




