#pragma GCC Optimize ("Ofast")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ll long long
#define N '\n'
#define pb push_back
#define pob pop_back
#define ff first
#define ss second
#define bb begin()
#define ee end()
#define fastIO() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
using namespace __gnu_pbds;

ll block;
ll ara[300000];
ll cnt[1000005];
ll ans[300000];
vector<pair<ll,pair<ll,ll> > > v ;

bool compare(pair<ll,pair<ll,ll> > p1,pair<ll,pair<ll,ll> > p2)
{
    if((p1.first/block) == (p2.first/block))
    {
        return p1.second.first < p2.second.first;
    }
    return p1.first < p2.first;
}

int main()
{
    fastIO();
    ll t,it;
    t = 1;
    for(it = 1;it <= t;it++)
    {
        ll n,q,i,j,k,s = 0,x,y,c = 0,d = 1,l = 0,r = -1;
        cin >> n >> q;
        map<ll,ll> compression;
        block = sqrt(n);
        for(i = 0;i < n;i++)
        {
            cin >> ara[i];
            if(compression.find(ara[i]) != compression.end())
            {
                ara[i] = compression[ara[i]];
            }
            else
            {
                compression[ara[i]] = d;
                ara[i] = d;
                d++;
            }
        }
        //cin >> q;
        for(i = 0;i < q;i++)
        {
            cin >> c >> d;
            c--,d--;
            v.pb(make_pair(c,make_pair(d,i)));
        }
        
        sort(v.begin(),v.end(),compare);
        c = 0;
        for(i = 0;i < (ll)v.size();i++)
        {
            //cout << v[i].ff << " " << v[i].ss << N;
            
            while(r < v[i].ss.ff)
            {
                r++;
                if(cnt[ara[r]] == 0)
                {
                    c++;
                }
                cnt[ara[r]]++;
            }
            while(r > v[i].ss.ff)
            {
                cnt[ara[r]]--;
                if(cnt[ara[r]] == 0)
                {
                    c--;
                }
                r--;
            }
            while(l < v[i].ff)
            {
                cnt[ara[l]]--;
                if(cnt[ara[l]] == 0)
                {
                    c--;
                }
                l++;
            }
            while(l > v[i].ff)
            {
                l--;
                if(cnt[ara[l]] == 0)
                {
                    c++;
                }
                cnt[ara[l]]++;
            }
            //cout << v[i].ff << " x " << v[i].ss.ff << N;
            //cout << l << " " << r << " " << cnt.size() << N;
            ans[v[i].ss.ss] = c;
        }
        for(i = 0;i < q;i++)
        {
            cout << ans[i] << N;
        }
    }
    return 0;
}
