#pragma GCC Optimize ("Ofast")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ll long long
#define N '\n'
#define pb push_back
#define pob pop_back
#define ff first
#define ss second
#define bb begin()
#define ee end()
#define fastIO() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
using namespace __gnu_pbds;

vector<ll> v[1000000];
ll start[1000000];
ll tin[1000000];
ll g;
vector<pair<ll,ll> > vp;

bool compare(pair<ll,ll> p1,pair<ll,ll> p2)
{
    //cout << "t\n";
    if(p1.first == p2.first)
    {
        return p1.second < p2.second;
    }
    return p1.first < p2.first;
}

void dfs(ll n,ll x)
{
    if(start[n] == 0)
    {
        g++;
        start[n] = g;
        for(ll i = 0;i < v[n].size();i++)
        {
            if(start[v[n][i]] == 0)
            {
                dfs(v[n][i],n);
            }
        }
        for(ll i = 0;i < v[n].size();i++)
        {
            if(v[n][i] != x)
            {
                tin[n] = min(tin[n],start[v[n][i]]);
                tin[n] = min(tin[n],tin[v[n][i]]);
            }
        }
        //cout << n << " " << start[n] << " " << tin[n] << N;
        if(start[x] < tin[n] && x != -1)
        {

            vp.pb(make_pair(x,n));
        }
    }
}

int main()
{
    fastIO();
    ll t,it;
    cin >> t;
    for(it = 1;it <= t;it++)
    {
        g = 0;
        ll i,n,j,c,d,k,f = 0,x,y;
        cin >> n;
        vp.clear();
        for(i = 0;i <= n;i++)
        {
            v[i].clear();
            start[i] = 0;
            tin[i] = INT_MAX;
        }
        for(i = 0;i < n;i++)
        {
            cin >> c;
            cin.ignore();
            cin.ignore();
            cin >> x;
            cin.ignore();
            for(j = 0;j < x;j++)
            {
                cin >> d;
                v[c].pb(d);
                v[d].pb(c);
            }
        }
        for(i = 0;i < n;i++)
        {
            dfs(i,-1);
        }
        cout << "Case " << it << ":\n";
        y = vp.size();
        cout << y << " critical links\n";
        if(y > 0)
        {
            for(i = 0;i < y;i++)
            {
                if(vp[i].ff > vp[i].ss)
                {
                    swap(vp[i].ff,vp[i].ss);
                }
            }
            sort(vp.begin(),vp.end(),compare);
            for(i = 0;i < y;i++)
            {
                cout << vp[i].ff << " - " << vp[i].ss << N;
            }
        }
    }
    return 0;
}
