#pragma GCC Optimize ("Ofast")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ll long long
#define N '\n'
#define pb push_back
#define pob pop_back
#define ff first
#define ss second
#define bb begin()
#define ee end()
#define fastIO() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
using namespace __gnu_pbds;

vector<ll> v[500005];
ll vis[500005];
ll parent[500005][70];
ll dis[500005];
ll l;
ll weight[500005];
ll tim;
ll start[500005];
ll finish[500005];
vector<ll> ara;
ll block;
ll cnt[1000];
ll ans[500005];


bool compare(pair<ll,pair<ll,ll> > p1,pair<ll,pair<ll,ll> > p2)
{
    if((p1.first/block) == (p2.first/block))
    {
        return p1.second.first < p2.second.first;
    }
    return p1.first < p2.first;
}

void dfs(ll n)
{
    if(vis[n] == 0)
    {
        start[n] = tim;
        ara.pb(weight[n]);
        //cout << n << " ";
        tim++;
        vis[n] = 1;
        for(ll i = 0;i < (ll)v[n].size();i++)
        {
            dfs(v[n][i]);
        }
        finish[n] = tim-1;
    }
}

void bfs(ll n)
{
	queue<ll> q;
	vis[n] = 1;
	q.push(n);
	parent[n][0] = n;
	while(!q.empty())
	{
		ll c = q.front();
		q.pop();
		for (ll j = 1; j <= l; ++j)
		{
			parent[c][j] = parent[parent[c][j-1]][j-1];
		}
		for(ll i = 0;i < v[c].size();i++)
		{
			if(vis[v[c][i]] == 0)
			{
				//cout << v[c][i] << " " << c << N;
				parent[v[c][i]][0] = c;
				dis[v[c][i]] = dis[c] + 1;
				vis[v[c][i]] = 1;

				q.push(v[c][i]);
			}
		}
	}
}

ll lca(ll u,ll v)
{
	ll a,b,c,i,j;
	if(dis[u] > dis[v])
	{
		swap(u,v);
	}
	while(dis[u] != dis[v])
	{
		a = log2(dis[v]-dis[u]);
		v = parent[v][a];
	}
	if(u == v)
	{
		return u;
	}
	b = log2(dis[v]);
	c = (ll)(pow(2,b)+0.5);
	for(ll i = b;i >= 0;i--)
	{
		if(parent[u][i] != parent[v][i])
		{
			u = parent[u][i];
			v = parent[v][i];
		}
	}
	return parent[u][0];
}

int main()
{
    fastIO();
    ll t,it;
    cin >> t;
    for(it = 1;it <= t;it++)
    {
        ll n,q,i,j,k,s = 0,x,y,c = 0,d,r;
        cin >> n >> q >> r;
        ara.clear();
        for(i = 0;i <= n;i++)
		{
			v[i].clear();
			vis[i] = 0;
			dis[i] = 0;
            weight[i] = 0;
            start[i] = 0;
            finish[i] = 0;
		}
        memset(cnt,0,sizeof(cnt));
        for(i = 0;i < n;i++)
        {
            cin >> weight[i];
        }
		for(i = 0;i < n-1;i++)
		{
			cin >> c >> d;
            v[c].pb(d);
            v[d].pb(c);
		}
		l = ceil(log2(n));
		for(i = 0;i <= n;i++)
		{
			for(j = 0;j <= l;j++)
			{
				parent[i][j] = 0;
			}
		}
        tim = 0;
        dfs(r);
        //cout << N;
        memset(vis,0,sizeof(vis));
		bfs(r);
        // for(i = 0;i < n;i++)
        // {
        //     cout << ara[i] << " ";
        // }
        //cout << N;
        vector<pair<ll,pair<ll,ll> > > vg ;
		for(i = 0;i < q;i++)
		{
			cin >> c >> d;
			x = lca(c,d);
            vg.pb(make_pair(start[x],make_pair(finish[x],i)));
            // cout << x << N;
            // cout << start[x] << " " << end[x] << N;
		}
        
        block = sqrt(vg.size());
        sort(vg.begin(),vg.end(),compare);
        c = 0;
        ll cur_l = 0,cur_r = 0;
        for(i = 0;i < (ll)vg.size();i++)
        {
            //cout << v[i].ff << " " << v[i].ss << N;
            
            while(cur_r <= vg[i].ss.ff)
            {
                if(cnt[ara[cur_r]] == 0)
                {
                    c++;
                }
                cnt[ara[cur_r]]++;
                cur_r++;
            }
            while(cur_r > vg[i].ss.ff+1)
            {
                cnt[ara[cur_r-1]]--;
                if(cnt[ara[cur_r-1]] == 0)
                {
                    c--;
                }
                cur_r--;
            }
            while(cur_l < vg[i].ff)
            {
                cnt[ara[cur_l]]--;
                if(cnt[ara[cur_l]] == 0)
                {
                    c--;
                }
                cur_l++;
            }
            while(cur_l > vg[i].ff)
            {
                
                if(cnt[ara[cur_l-1]] == 0)
                {
                    c++;
                }
                cnt[ara[cur_l-1]]++;
                cur_l--;
            }
            ans[vg[i].ss.ss] = c;
        }
        for(i = 0;i < q;i++)
        {
            cout << ans[i] << N;
        }
    }
    return 0;
}
