#pragma GCC Optimize ("Ofast")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ll long long
#define N '\n'
#define pb push_back
#define pob pop_back
#define ff first
#define ss second
#define bb begin()
#define ee end()
#define fastIO() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
using namespace __gnu_pbds;

struct node
{
    ll endmark;
    node* next[26+1];
    node()
    {
        endmark = 0;
        for(int i = 0;i < 26;i++)
        {
            next[i] = NULL;
        }
    }
};

void tinsert(string str,node* root)
{
    node* curr = root;
    ll i,len,id;
    len = str.length();
    for( i = 0;i < len;i++)
    {
        id = str[i] - '0';
        if(curr->next[id] == NULL)
        {
            curr->next[id] = new node();
        }
        curr = curr->next[id];
    }
    curr->endmark = 1;
}
ll tsearch(string str,node* root)
{
    node* curr = root;
    ll i,len,id;
    len = str.length();
    for( i = 0;i < len;i++)
    {
        id = str[i] - '0';
        if(curr->next[id] == NULL)
        {
            return 0;
        }
        curr = curr->next[id];
    }
    for(i = 0;i < 10;i++)
    {
        if(curr->next[i] != NULL)
        {
            //cout << i << N;
            return 1;
        }
    }
    return 0;
}

void del(node* cur)
{
    for(ll i = 0;i < 26;i++)
    {
        if(cur->next[i])
        {
            del(cur->next[i]);
        }
    }
    delete(cur);
}

int main()
{
    fastIO();
    ll t,it;
    cin >> t;
    for(it = 1;it <= t;it++)
    {
        ll n,i,j,k,c,d,x,y,f = 0,s = 0;
        cin >> n;
        node* root = new node();
        string str[n];
        for(i = 0;i < n;i++)
        {
            cin >> str[i];
            tinsert(str[i],root);
        }
        for(i = 0;i < n;i++)
        {
            f = tsearch(str[i],root);
            if(f == 1)
            {
                //cout << i << N;
                break;
            }
        }
        if(f == 0)
        {
            cout << "YES\n";
        }
        else
        {
            cout << "NO\n";
        }
        del(root);
    }
}
