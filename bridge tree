#pragma GCC Optimize ("Ofast")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ll long long
#define N '\n'
#define pb push_back
#define pob pop_back
#define ff first
#define ss second
#define bb begin()
#define ee end()
#define fastIO() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
using namespace __gnu_pbds;

vector<ll> v[100000];
vector<ll> brgtree[100000];
ll start[100000];
ll tin[100000];
ll vis[100000];
ll g;
map<pair<ll,ll>,ll> mp;
map<pair<ll,ll>,ll>::iterator itr1;
vector<vector<ll> > vv;
vector<ll> temp;
map<ll,ll> cmpmark;

void dfs(ll n,ll x)
{
    if(start[n] == -1)
    {
        
        start[n] = tin[n] = g;
        g++;
        //cout << n << " " << x << N;
        ll children = 0,cnt = 0;
        for(ll i = 0;i < v[n].size();i++)
        {
            if(v[n][i] == x)
            {
                continue;
            }
            if(start[v[n][i]] != -1)
            {
                tin[n] = min(tin[n],start[v[n][i]]);
            }
            else
            {
                dfs(v[n][i],n);
                tin[n] = min(tin[n],tin[v[n][i]]);
                if((tin[v[n][i]] > start[n]))
                {
                    if(n > v[n][i])
                    {
                        mp[make_pair(v[n][i],n)]++;
                    }
                    else
                    {
                        mp[make_pair(n,v[n][i])]++;
                    }
                }
            }
        }
    }
}

void dfs2(ll n,ll x)
{
    if(vis[n] == 0)
    {
        if(n > x)
        {
            itr1 = mp.find(make_pair(x,n));

        }
        else
        {
            itr1 = mp.find(make_pair(n,x));
        }
        if(itr1 != mp.end())
        {
            return;
        }
        vis[n] = 1;
        temp.pb(n);
        for(ll i = 0;i < v[n].size();i++)
        {
            dfs2(v[n][i],n);
        }
    }
}

int main()
{
    fastIO();
    ll it,t;
    cin >> t;
    for(it = 1;it <= t;it++)
    {
        g = 1;
        ll i,n,m,j,k,c,d,f = 0,x,y,ans = 0;
        mp.clear();
        vv.clear();
        cmpmark.clear();
        temp.clear();
        cin >> n >> m;
        ll deg[n+5] = {};
        for(i = 0;i <= n;i++)
        {
            v[i].clear();
            brgtree[i].clear();
            start[i] = -1;
            tin[i] = -1;
            vis[i] = 0;
        }
       
        for(i = 0;i < m;i++)
        {
            cin >> c >> d;
            c++;
            d++;
            v[c].pb(d);
            v[d].pb(c);
        }
        for(i = 1;i <= n;i++)
        {
            dfs(i,-1);
        }
        for(i = 1;i <= n;i++)
        {
            temp.clear();
            dfs2(i,-1);
            if(temp.size() > 0)
            {
                vv.pb(temp);
            }
            
        }
        //cout << vv.size() << N;
        for(i = 0;i < vv.size();i++)
        {
            for(j = 0;j < vv[i].size();j++)
            {
                //cout << vv[i][j] << " ";
                cmpmark[vv[i][j]] = i+1;
            }
            //cout << N;
        }
        for(itr1 = mp.begin();itr1 != mp.end();itr1++)
        {
            c = cmpmark[(itr1->ff).ff];
            d = cmpmark[(itr1->ff).ss];
            deg[c]++;
            deg[d]++;
            brgtree[c].pb(d);
            brgtree[d].pb(c);
        }
        for(i = 1;i <= vv.size();i++)
        {
            if(deg[i] == 1)
            {
                ans++;
            }
        }
        ans = ceil(ans/2.0);
        cout << "Case " << it << ": " <<  ans << N;
    }
    return 0;
}
