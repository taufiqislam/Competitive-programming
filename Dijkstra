#pragma GCC Optimize ("Ofast")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ll long long
#define N '\n'
#define pb push_back
#define pob pop_back
#define ff first
#define ss second
#define bb begin()
#define ee end()
#define fastIO() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
using namespace __gnu_pbds;
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero).

const ll INF = 1000000000;
vector<pair<ll, ll> > adj[1000];
ll weight[1000];
ll dis[1000];
ll n;

void dijkstra(ll s) {
    vector<bool> u(n, false);

    dis[s] = 0;
    for (ll i = 0; i < n; i++) {
        ll v = -1;
        for (ll j = 0; j < n; j++) {
            if (!u[j] && (v == -1 || dis[j] < dis[v]))
                v = j;
        }

        if (dis[v] == INF)
            break;

        u[v] = true;
        for(ll i = 0;i < adj[v].size();i++)
        {
            pair<ll,ll> edge = adj[v][i];
            ll to = edge.first;
            ll len = edge.second;

            if (dis[v] + len < dis[to]) {
                dis[to] = dis[v] + len;
            }
        }
    }
}


int main()
{
    fastIO();
    ll t = 1,it;
    cin >> t;
    for(it = 1;it <= t;it++)
    {
        ll m,q,i,j,k,s = 0,x,y,c = 0,d;
        cin >> n;
        for(i = 0;i <= n;i++)
        {
            dis[i] = INF;
            adj[i].clear();
        }
        for(i = 1;i <= n;i++)
        {
            cin >> weight[i];
        }
        cin >> m;
        for(i = 0;i < m;i++)
        {
            cin >> c >> d;
            x = (weight[d] - weight[c]);
            x = x*x*x;
            adj[c].pb(make_pair(d,x));
            x = (weight[c] - weight[d]);
            x = x*x*x;
            adj[d].pb(make_pair(c,x));
        }
        dijkstra(1);
        cout << "Case " << it << ":\n";
        cin >> q;
        for(i = 0;i < q;i++)
        {
            cin >> d;
            if(dis[d] < 3 || dis[d] == INF)
            {
                cout << "?\n";
            }
            else
            {
                cout << dis[d] << N;
            }
            
        }
    }
    return 0;
}
