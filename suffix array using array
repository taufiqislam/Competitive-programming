#pragma GCC Optimize ("Ofast")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ll int
#define N '\n'
#define pb push_back
#define pob pop_back
#define ff first
#define ss second
#define bb begin()
#define ee end()
#define fastIO() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
using namespace __gnu_pbds;
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero).
 
 
void suffixArray(ll suf[],string s)
{
    ll n = s.size();
    const ll alphabet = 256;
    ll p[n+5],c[n+5];
    ll m = max(alphabet,n+5);
    ll cnt[m] = {};
    
    for (ll i = 0; i < n; i++)
    {
        cnt[s[i]]++;
    }
    for (ll i = 1; i < alphabet; i++)
    {
        cnt[i] += cnt[i-1];
    }
    
    for (ll i = 0; i < n; i++)
    {
        p[--cnt[(ll)s[i]]] = i;
    }
    c[p[0]] = 0;
    ll classes = 1;
    for (ll i = 1; i < n; i++)
    {
        if (s[p[i]] != s[p[i-1]])
        {
            classes++;
        }
        c[p[i]] = classes - 1;
    }
    ll pn[n+5],cn[n+5];
    for (ll h = 0; (1 << h) < n; ++h)
    {
        for (ll i = 0; i < n; i++)
        {
            pn[i] = p[i] - (1 << h);
            if (pn[i] < 0)
            {
                pn[i] += n;
            }
        }
        memset(cnt,0,sizeof(cnt));
        for (ll i = 0; i < n; i++)
        {
            cnt[c[pn[i]]]++;
        }
        for (ll i = 1; i < classes; i++)
        {
            cnt[i] += cnt[i-1];
        }
        for (ll i = n-1; i >= 0; i--)
        {
            p[--cnt[c[pn[i]]]] = pn[i];
        }
        cn[p[0]] = 0;
        classes = 1;
        for (ll i = 1; i < n; i++)
        {
            pair<ll, ll> cur = make_pair(c[p[i]], c[(p[i] + (1 << h)) % n]);
            pair<ll, ll> prev = make_pair(c[p[i-1]], c[(p[i-1] + (1 << h)) % n]);
            if (cur != prev)
            {
                ++classes;
            }
            cn[p[i]] = classes - 1;
        }
        for(ll i = 0;i < n;i++)
        {
            c[i] = cn[i];
        }
    }
    for(ll i = 0;i < n;i++)
    {
        suf[i] = p[i];
    }
}
 
void prefix(string s,ll p[],ll lcp[]) {
    ll n = s.size();
    ll rank[n+5] = {};
    for (ll i = 0; i < n; i++)
        rank[p[i]] = i;
 
    ll k = 0;
    for (ll i = 0; i < n; i++) {
        if (rank[i] == n - 1) {
            k = 0;
            continue;
        }
        ll j = p[rank[i] + 1];
        while (i + k < n && j + k < n && s[i+k] == s[j+k])
            k++;
        lcp[rank[i]] = k;
        if (k)
            k--;
    }
}
 
int main()
{
    //fastIO();
    ll t,it;
    t = 1;
    for(it = 1; it <= t; it++)
    {
        ll i,n,m,j,k,s = 0,c,d,x,y,e,f,maxi = 0;
        string str,stt;
        cin >> str;
        n = str.length();
        str += '$';
        cin >> stt;
        str += stt;
        str += '#';
        m = str.length();
        ll suf[m+5];
        ll lcp[m+5] = {};
        suffixArray(suf,str);
        prefix(str,suf,lcp);
        for(i = 0;i < m-1;i++)
        {
            if((suf[i] < n && suf[i+1] > n) || (suf[i] > n && suf[i+1] < n))
            {
                maxi = max(maxi,lcp[i]);
            }
            
        }
        cout << maxi << N;
        
    }
 
} 
